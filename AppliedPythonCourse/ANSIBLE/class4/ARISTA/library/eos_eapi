#!/usr/bin/env python
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
DOCUMENTATION = """
module: eos_eapi
short_description: Configures EOS command API
description:
  - Provides active state management of EOS command API configuration on
    Arista EOS nodes. All configuration of resources is idempotent unless
    otherwise specified.
author: Arista EOS+
notes:
requirements:
  - Arista EOS 4.12.0 or later
  - EOS command API enabled
options:
  protocol:
    description:
      - The protocol that command api should use for transport.
    required: False
    default: null
    choices: ['http', 'https']
    aliases: []
  port:
    description:
      - The TCP port to be used along with the protocol to listen for
        connections on.  Valid range is 1-65535
    required: false
    aliases: []
  admin:
    description:
      - Configures the administrative state of command api.  Valid
        values include enable and disable.
    required: false
    default: null
    choices: ['enable', 'disable']
    aliases: []
  state:
    description:
      - The state of eAPI related to the current running configuration
    required: false
    default: 'configured'
    choices: ['configured', 'unconfigured', 'default']
    aliases: []
"""
import re

from ansible.module_utils.basic import *

def run_command(module, commands):
    cmd = ['FastCli', '-p', '15', '-A', '-c']
    cmd.append(commands)
    return module.run_command(cmd)

def config(module, commands):
    return run_command(module, '\n'.join(['configure'] + commands))

def get_resource(module):
    (rc, out, err) = run_command(module, 'show running-config section '
                                         'management api http-commands')

    resource = dict()
    if out != None:
        admin = 'enable' if 'no shutdown' in out else 'disable'
        resource['admin'] = admin

        proto = 'http' if 'no protocol https' in out else 'https'
        resource['protocol'] = proto

        match = re.search(r'port\s(?P<port>\d+)', out)
        if match:
            resource['port'] = match.group('port')
        else:
            resource['port'] = 80 if proto == 'http' else 443

    return resource

def configure_eapi(module, commands, state='running'):
    config(module, commands)

    timeout = 3
    while time > 0:
        resource = get_resource(module)
        if resource:
            return True
        time.sleep(1)
        timeout = timeout - 1
    return False

def enable_eapi(admin='enable', protocol='https', port=443):
    config = list()

    if protocol == 'http':
        config += ['no protocol https', 'protocol http port %s' % port]
    elif protocol == 'https':
        config += ['no protocol http', 'protocol https port %s' % port]

    if admin == 'enable':
        config.append('no shutdown')
    else:
        config.append('shutdown')

    return config

def set_port(protocol, port):
    if port is not None:
        return str(port)
    return '80' if protocol == 'http' and not port else '443'


def main():
    module = AnsibleModule(
        argument_spec = dict(
            admin=dict(type='str', default='enable',
                       choices=['enable', 'disable']),
            protocol=dict(type='str', default='https',
                          choices=['http', 'https']),
            port=dict(type='int'),
            state=dict(type='str', default='configured',
                       choices=['configured', 'unconfigured', 'default'])
        ),
        supports_check_mode=True
    )

    result = dict(changed=False)
    state = module.params['state']

    new_resource = {
        'admin': module.params['admin'],
        'protocol': module.params['protocol'],
        'port': set_port(module.params['protocol'], module.params['port'])
    }

    commands = list()
    current_resource = get_resource(module)

    if state == 'configured':
        if current_resource is None:
            commands.extend(enable_eapi(**new_resource))

        elif set(new_resource.items()).difference(current_resource.items()):
            commands.extend(enable_eapi(**new_resource))

        if commands:
            commands.insert(0, 'management api http-commands')

    elif state in ['unconfigured', 'default']:
        if current_resource is not None:
            commands.append('default management api http-commands')

    if commands:
        if not module.check_mode:
            if not configure_eapi(module, commands, state='running'):
                module.fail_json(msg='timeout trying to enable command api')
        result['commands'] = commands
        result['changed'] = True

    result['resource'] = get_resource(module)
    result['current_resource'] = current_resource
    result['new_resource'] = new_resource

    module.exit_json(**result)

main()
