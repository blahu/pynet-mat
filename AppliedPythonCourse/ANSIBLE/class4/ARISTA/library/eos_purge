#!/usr/bin/env python
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
DOCUMENTATION = """
module: eos_purge
short_description: Purges unmanaged resources from the running configuration
description:
  - The purge module provides a mechanism to purge all resources of a given
    type from the running configuration unless the resource has been
    specified in the playbook.
author: Arista EOS+
notes:
  - Please be sure to fully understand the implications of this module
    before using it in a production environment.
  - This module is still in testing, please do not use it in production
    environments
requirements:
  - Arista EOS 4.12.0 or later
  - EOS command API enabled
options:
  resource:
    description:
      - The resource to purge from the running configuration.
    required: true
    choices: ['eos_vlan', 'eos_switchport']
    aliases: []
  rseults:
    description:
      - The results parameter must be the output from a registered variable
        from a previous run of the resource to be purged.  See the EXAMPLES
        for more details.
    required: true
    default: null
    aliases: []
  eapi_hostname:
    description:
      - The IP address or DNS hostname of the EOS device to be managed.  If
        local_connection is used, then this value must be configured.  When
        not using local_connection, this value does not need to be supplied
        and defaults to 'localhost'
    required: false
    default: 'localhost'
    aliases: []
  eapi_username:
    description:
      - The username to use for calls to eAPI.  If the username is not
        specified, then the default is used
    required: false
    default: 'admin'
    alias: []
  eapi_password:
    descripition:
      - The password to use for calls to eAPI.  If the password is not
        specified then the default is used ('')
    required: false
    default: ''
    alias: []
  eapi_protocol:
    description:
      - Configures the transport for connection to eAPI for either local
        or remote connections.  This value should be the same as shown
        from the output of 'show management api http-commands'
    require: false
    default: 'https'
    choices: ['http', 'https']
    alias: []
  eapi_port:
    description:
      - Configures the port used ifor connecting to eAPI for either local
        or remote connections.  This value should be the same as shown
        from the output of 'show management api http-commands'
      - If no value is specified, the the port is automatically determined
        based on the setting of eapi_protocol (http=80, https=443).
      - The value for this attribute must be in the range of 1 to 65535
    require: false
    default: null
    alias: []
"""

EXAMPLES = """

# The following example will add VLANs 10 and 20 to all hosts in the
# all_arista group.  It will then scan the running configuration and
# remove any VLAN resources where vlanid is not equal to 10 or 20

- name: Configure VLAN resources
  hosts: all_arista
  vars:
    purge: ['eos_vlan']
  role:
    - bridging
      vlans:
        - vlanid: 10
          name: foo
        - vlanid: 20
          name: bar

# The purge module can also be used directly as a task in playbook.  In
# order to use the purge module directly in a playbook, the resource
# module must be called and registered properly.

- name: Configure VLAN resources
  hosts: all_arista
  vars:
    purge: ['eos_vlan']
    vlans:
      - vlanid: 10
        name: foo
      - vlanid: 20
        name: bar
  tasks:
    - name: configure vlan 10
      eos_vlan: vlanid={{ item.vlanid }} name={{ item.name }}
      with_items: vlans
      register: eos_vlans
    - name: purge vlan entries
      purge: resource=eos_vlan result=eos_vlans
"""

import json
import urlparse
import collections

from ansible.module_utils.basic import *

import eapilib

EAPI_KWARG_MAP = {
    'eapi_hostname': 'hostname',
    'eapi_username': 'username',
    'eapi_password': 'password',
    'eapi_protocol': 'protocol',
    'eapi_port': 'port'
}

def eos_vlan(eapi, results):
    resp = eapi.enable('show vlan')

    configured = [str(v) for v in resp[0]['vlans'].keys()]

    expected = list()
    for vlan in results:
        if vlan['resource'] is not None:
            expected.append(str(vlan['resource']['vlanid']))

    commands = list()
    purged = list()

    for vlan in set(configured).difference(expected):
        commands.append('no vlan %s' % vlan)
        purged.append(vlan)

    if commands:
        eapi.config(commands)
        return dict(commands=commands, purged=purged)
    return dict(purged=[])

def eos_switchport(eapi, results):
    resp = eapi.enable('show interfaces')

    configured = list()
    for interface in resp[0]['interfaces'].values():
        if interface['forwardingModel'] == 'bridged':
            configured.append(str(interface['name']))

    expected = [str(i['resource']['name']) for i in results]

    commands = list()
    purged = list()

    for interface in set(configured).difference(expected):
        commands.append('interface %s' % interface)
        commands.append('no switchport')
        purged.append(interface)

    if commands:
        eapi.config(commands)
        return dict(commands=commands, purged=purged)
    return dict(purged=[])

def eos_portchannel(eapi, results):
    resp = eapi.enable('show interfaces')

    configured = list()
    for interface in resp[0]['interfaces'].values():
        if interface['name'].startswith('Port-Channel'):
            configured.append(str(interface['name']))

    expected = list()
    for intf in results:
        if intf['resource'] is not None:
            expected.append(str(intf['resource']['name']))

    commands = list()
    purged = list()

    for interface in set(configured).difference(expected):
        commands.append('no interface %s' % interface)
        purged.append(interface)

    if commands:
        eapi.config(commands)
        return dict(commands=commands, purged=purged)
    return dict(purged=[])


def main():

    module = AnsibleModule(
        argument_spec = dict(
            resource=dict(required=True, type='str'),
            results=dict(required=True, type='list'),
            eapi_hostname=dict(default='localhost'),
            eapi_username=dict(default='admin'),
            eapi_password=dict(default=''),
            eapi_protocol=dict(default='https'),
            eapi_port=dict(default=None)
        ),
        supports_check_mode=True
    )

    result = dict(changed=False)

    kwargs = dict()
    for key, value in module.params.items():
        if value and key in EAPI_KWARG_MAP:
            kwargs[EAPI_KWARG_MAP[key]] = value

    eapi = eapilib.connections.create_connection(**kwargs)

    func = globals().get(module.params['resource'])
    if not func:
        module.exit_json(msg='resource %s does not currently support the '
                             'purge function' % module.params['resource'])

    resp = func(eapi, module.params['results']) or False
    if resp:
        if resp.get('purged'):
            result.update(resp)
            result['changed'] = True

    module.exit_json(**result)

main()
