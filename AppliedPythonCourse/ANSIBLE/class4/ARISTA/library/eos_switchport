#!/usr/bin/env python
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
DOCUMENTATION = """
module: eos_switchport
short_description: Manage switchport (layer 2) interface resources in EOS
description:
  - Provides active state management of switchport (layer 2) interface
    configuration in Arista EOS.  All configuration of resources is
    idempotent unless otherwise specified.
author: Arista EOS+
notes:
requirements:
  - Arista EOS 4.12.0 or later
  - EOS command API enabled
options:
  name:
    description:
      - Provides a descriptive name for this resource.  The name parameter is
        required for all switchport resources.  If the the interface parameter
        is not specified, then the name parameter is used instead.
    required: true
    default: null
    aliases: []
  interface:
    description:
      - The unique interface identifier name.  The interface name must use
        the full interface name (no abbreviated names).  For example,
        interfaces should be specified as Ethernet1 not Et1
    required: false
    aliases: ['intfid']
  mode:
    description:
      - Identifies the mode of operation for the interface.  Switchport
        interfaces can act as trunk interfaces (carrying multiple VLANs)
        or as access interfaces (attached to a single VLAN)
    required: false
    default: null
    choices: ['trunk', 'access']
    aliases: []
  access_vlan:
    description:
      - Configures the VLAN associated with a switchport that is
        configured to use 'access' mode.  This parameter only takes
        effect if mode is equal to 'access'
      - The access vlan must be in the range of 1 to 4094
    required: false
    default: null
    alias: []
  trunk_native_vlan:
    description:
      - Configures the native VLAN on a trunk interface for untagged
        packets entering the switchport.  This parameter only takes
        effect if mode is equal to 'trunk'
      - The trunk native vlan must be in the range of 1 to 4094
    required: false
    default: null
    alias: []
  trunk_allowed_vlans:
    description:
      - Configures the set of VLANs that are allowed to traverse this
        switchport interface.  This parameter only takes effect if
        the mode is configured to 'trunk'
      - The set of VLAN identifiers all be within the range of 1 to 4094
    required: false
    default: null
    alias: []
  state:
    description:
      - The state of the switchport related to the current running
        configuration.
    required: false
    default: 'configured'
    choices: ['configured', 'unconfigured', 'default']
    aliases: []
  null_as_default:
    description:
      - Instructs the module how to handle null values.  If this flag is set
        then null values trigger default configuration otherwise do nothing
    required: false
    default: false
    choices: [true, false]
    aliases: []
  eapi_hostname:
    description:
      - The IP address or DNS hostname of the EOS device to be managed.  If
        local_connection is used, then this value must be configured.  When
        not using local_connection, this value does not need to be supplied
        and defaults to 'localhost'
    required: false
    default: 'localhost'
    aliases: []
  eapi_username:
    description:
      - The username to use for calls to eAPI.  If the username is not
        specified, then the default is used
    required: false
    default: 'admin'
    alias: []
  eapi_password:
    descripition:
      - The password to use for calls to eAPI.  If the password is not
        specified then the default is used ('')
    required: false
    default: ''
    alias: []
  eapi_protocol:
    description:
      - Configures the transport for connection to eAPI for either local
        or remote connections.  This value should be the same as shown
        from the output of 'show management api http-commands'
    require: false
    default: 'https'
    choices: ['http', 'https']
    alias: []
  eapi_port:
    description:
      - Configures the port used ifor connecting to eAPI for either local
        or remote connections.  This value should be the same as shown
        from the output of 'show management api http-commands'
      - If no value is specified, the the port is automatically determined
        based on the setting of eapi_protocol (http=80, https=443).
      - The value for this attribute must be in the range of 1 to 65535
    require: false
    default: null
    alias: []
"""

import json
import urlparse
import collections
import re

from ansible.module_utils.basic import *

import eapilib

EAPI_KWARG_MAP = {
    'eapi_hostname': 'hostname',
    'eapi_username': 'username',
    'eapi_password': 'password',
    'eapi_protocol': 'protocol',
    'eapi_port': 'port'
}

def get_switchport(eapi, name):
    enabled_re = re.compile(r'(?<=Switchport:\s)(?P<enabled>\w+)')
    mode_re = re.compile(r'(?<=Operational Mode:\s)(?P<mode>.*)')
    access_vlan_re = re.compile(r'(?<=Access Mode VLAN:\s)(?P<access_vlan>\d+)')
    trunk_vlan_re = re.compile(r'(?<=Trunking Native Mode VLAN:\s)'
                               r'(?P<trunk_vlan>\d+)')
    trunking_vlans_re = re.compile(r'(?<=Trunking VLANs Enabled:\s)'
                                   r'(?P<trunking_vlans>.*)')

    try:
        resp = eapi.enable('show interfaces %s switchport' % name, 'text')
        output = resp[0]['output']

        match = enabled_re.search(output)
        enabled = False if match.group('enabled') == 'Disabled' else True

        if not enabled:
            return None

        switchport = dict(name=name, state='configured')

        match = mode_re.search(output)

        switchport['mode'] = \
            'access' if match.group('mode') == 'static access' else 'trunk'

        switchport['access_vlan'] = \
            access_vlan_re.search(output).group('access_vlan')

        switchport['trunk_native_vlan'] = \
            trunk_vlan_re.search(output).group('trunk_vlan')

        switchport['trunk_allowed_vlans'] = \
            trunking_vlans_re.search(output).group('trunking_vlans')

        return switchport

    except eapilib.connections.CommandError as exc:
        if exc.message[0][0] == 1002:
            return None
        raise

def create_switchport(eapi, name):
    commands = [
        'interface %s' % name,
        'no ip address',
        'switchport'
    ]
    eapi.config(commands)
    return get_switchport(eapi, name)


ATTRIBUTE_TO_CONFIG_MAP = {
    'mode': 'switchport mode {mode}',
    'access_vlan': 'switchport access vlan {access_vlan}',
    'trunk_native_vlan': 'switchport trunk native vlan {trunk_native_vlan}',
    'trunk_allowed_vlans': 'switchport trunk allowed vlan {trunk_allowed_vlans}'
}

ATTRIBUTE_TO_DEFAULT_MAP = {
    'mode': 'default switchport mode',
    'access_vlan': 'default switchport access vlan',
    'trunk_native_vlan': 'default switchport trunk native vlan',
    'trunk_allowed_vlans': 'default switchport trunk allowed vlan'
}

def main():

    module = AnsibleModule(
        argument_spec = dict(
            name=dict(required=True, type='str'),
            interface=dict(type='str'),
            mode=dict(choices=['trunk', 'access']),
            access_vlan=dict(type='str'),
            trunk_native_vlan=dict(type='str'),
            trunk_allowed_vlans=dict(type='str'),
            state=dict(default='configured',
                       choices=['configured', 'unconfigured', 'default']),
            null_as_default=dict(type='bool', default=False),
            eapi_hostname=dict(default='localhost'),
            eapi_username=dict(default='admin'),
            eapi_password=dict(default=''),
            eapi_protocol=dict(default='https'),
            eapi_port=dict(default=None)
        ),
        supports_check_mode=True
    )

    result = dict(changed=False, created=False)

    kwargs = dict()
    for key, value in module.params.items():
        if value and key in EAPI_KWARG_MAP:
            kwargs[EAPI_KWARG_MAP[key]] = value

    eapi = eapilib.connections.create_connection(**kwargs)

    proposed = dict()
    for key, value in module.params.items():
        if not str(key).startswith('eapi_'):
            proposed[key] = value

    state = module.params['state']
    null_as_default = module.params['null_as_default']
    intfid = module.params['interface'] or module.params['name']

    if str(intfid).upper()[0:2] not in ['ET', 'PO']:
        return module.fail_json(msg='invalid interface (%s) specified' % intfid)


    allowed_vlans = str(module.params['trunk_allowed_vlans']).replace(' ', '')

    new_resource = {
        'name': intfid,
        'mode': module.params['mode'],
        'access_vlan': module.params['access_vlan'],
        'trunk_native_vlan': module.params['trunk_native_vlan'],
        'trunk_allowed_vlans': allowed_vlans
    }

    commands = list()
    current_resource = get_switchport(eapi, intfid)

    if state == 'configured':
        if current_resource is None:
            current_resource = create_switchport(eapi, intfid)
            result['created'] = True

        changeset = set(new_resource.items()).difference(\
                    current_resource.items())

        for key, value in changeset:
            if value is None and null_as_default:
                command = ATTRIBUTE_TO_DEFAULT_MAP.get(key)

            elif value is not None:
                command = ATTRIBUTE_TO_CONFIG_MAP.get(key)
                if command:
                    command = str(command).format(**new_resource)

            else:
                command = None

            if command:
                commands.append(command)

    elif state == 'unconfigured' and current_resource is not None:
        commands.append('no switchport')

    elif state == 'default':
        commands.append('default switchport')

    if commands:
        if not module.check_mode:
            commands.insert(0, 'interface %s' % intfid)
            result['commands'] = commands
            eapi.config(commands)
        result['changed'] = True

    result['resource'] = get_switchport(eapi, intfid)
    result['current_resource'] = current_resource
    result['new_resource'] = new_resource


    module.exit_json(**result)

main()
