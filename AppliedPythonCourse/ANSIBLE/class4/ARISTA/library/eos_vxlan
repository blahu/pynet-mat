#!/usr/bin/env python
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
DOCUMENTATION = """
module: eos_vxlan
short_description: Manage VXLAN virtual tunnint interface
description:
  - Provides active state management of vxlan interface
    configuration on Arista EOS nodes. All configuration of
    resources is idempotent unless otherwise specified.
author: Arista EOS+
notes:
requirements:
  - Arista EOS 4.12.0 or later
  - EOS command API enabled
options:
  name:
    description:
      - Provides an arbitrary named description for this interface.  If
        the interface parameter is not set, then the name value is used
        as the interface to configure.
    required: true
    aliases: []
  interface:
    description:
      - The unique interface identifier name.  The interface name must use
        the full interface name (no abbreviated names).  For example,
        interfaces should be specified as Ethernet1 not Et1
    required: false
    aliases: ['intfid']
  admin:
    description:
      - Configures the administrative state for the interface.  Valid
        values include enable and disable.
    required: false
    default: null
    choices: ['enable', 'disable']
    aliases: []
  description:
    description:
      - Sets a one line ASCII description for the interface.
    required: false
    aliases: []
  null_as_default:
    description:
      - Instructs the module how to handle null values.  If this flag is set
        then null values trigger default configuration otherwise do nothing
    required: false
    default: false
    choices: [true, false]
    aliases: []
  state:
    description:
      - Identifies the state of the interface.  Interfaces can be either
        configured, unconfigured or default.   Please beware that an interface with
        state of default will also wipe out any additional services
        on top of the physical interface.
    required: false
    default: configured
    choices: ['configured', 'unconfigured', 'default']
    aliases: []
  eapi_hostname:
    description:
      - The IP address or DNS hostname of the EOS device to be managed.  If
        local_connection is used, then this value must be configured.  When
        not using local_connection, this value does not need to be supplied
        and defaults to 'localhost'
    required: false
    default: 'localhost'
    aliases: []
  eapi_username:
    description:
      - The username to use for calls to eAPI.  If the username is not
        specified, then the default is used
    required: false
    default: 'admin'
    alias: []
  eapi_password:
    descripition:
      - The password to use for calls to eAPI.  If the password is not
        specified then the default is used ('')
    required: false
    default: ''
    alias: []
  eapi_protocol:
    description:
      - Configures the transport for connection to eAPI for either local
        or remote connections.  This value should be the same as shown
        from the output of 'show management api http-commands'
    require: false
    default: 'https'
    choices: ['http', 'https']
    alias: []
  eapi_port:
    description:
      - Configures the port used ifor connecting to eAPI for either local
        or remote connections.  This value should be the same as shown
        from the output of 'show management api http-commands'
      - If no value is specified, the the port is automatically determined
        based on the setting of eapi_protocol (http=80, https=443).
      - The value for this attribute must be in the range of 1 to 65535
    require: false
    default: null
    alias: []
"""
import syslog
import time

from ansible.module_utils.basic import *

import eapilib

COMMAND_DELAY = 3

EAPI_KWARG_MAP = {
    'eapi_hostname': 'hostname',
    'eapi_username': 'username',
    'eapi_password': 'password',
    'eapi_protocol': 'protocol',
    'eapi_port': 'port'
}

def log(entry):
    syslog.openlog('ansible-eos_interface-%s' % os.path.basename(__file__))
    syslog.syslog(syslog.LOG_NOTICE, entry)

def isdefault(eapi, identifier):
    resp = eapi.enable('show running-config interfaces %s' % identifier, 'text')
    output = resp[0]['output']
    return len(str(output).split('\n')) == 2

def isconfigured(eapi, identifier):
    try:
        resp = eapi.enable('show interfaces %s' % identifier)
        return True
    except eapilib.connections.CommandError as exc:
        if exc.message[0][0] == 1002:
            return False
        raise

def get_resource(eapi, identifier):
    try:
        resp = eapi.enable('show interfaces %s' % identifier)
        data = resp[0]['interfaces'][identifier]

        resource = dict(name=identifier, state='configured')
        resource['description'] = data['description']
        resource['admin'] = 'disable' if data['interfaceStatus'] == 'disabled'\
                              else 'enable'
        resource['multicast_group'] = data['floodMcastGrp']
        resource['source_interface'] = data['srcIpIntf']

        return resource

    except eapilib.connections.CommandError as exc:
        if exc.message[0][0] == 1002:
            return None
        raise

def create_resource(eapi, identifier):
    resp = eapi.config('interface %s' % identifier)
    time.sleep(COMMAND_DELAY)
    return get_resource(eapi, identifier)

set_admin = lambda kwargs: 'shutdown' if kwargs['admin'] == 'disable' \
                            else 'no shutdown'

ATTRIBUTE_TO_DEFAULT_MAP = {
    'admin': 'default shutdown',
    'description': 'default description',
    'multicast_group': 'default multicast_group',
    'source_interface': 'default source_interface'
}

ATTRIBUTE_TO_CONFIG_MAP = {
    'admin': set_admin,
    'description': 'description {description}',
    'multicast_group': 'vxlan multicast-group {multicast_group}',
    'source_interface': 'vxlan source-interface {source_interface}'
}


def main():

    module = AnsibleModule(
        argument_spec = dict(
            name=dict(required=False, type='str'),
            admin=dict(choices=['enable', 'disable']),
            description=dict(type='str'),
            multicast_group=dict(type='str'),
            source_interface=dict(type='str'),
            state=dict(default='configured',
                       choices=['configured', 'unconfigured', 'default']),
            null_as_default=dict(type='bool', default=False),
            eapi_hostname=dict(default='localhost'),
            eapi_username=dict(default='admin'),
            eapi_password=dict(default=''),
            eapi_protocol=dict(default='https'),
            eapi_port=dict(default=None)
        ),
        supports_check_mode=True
    )

    result = dict(changed=False, created=False)

    kwargs = dict()
    for key, value in module.params.items():
        if value and key in EAPI_KWARG_MAP:
            kwargs[EAPI_KWARG_MAP[key]] = value

    eapi = eapilib.connections.create_connection(**kwargs)

    identifier = 'Vxlan1'
    state = module.params['state']
    null_as_default = module.params['null_as_default']

    new_resource = {
        'name': identifier,
        'admin': module.params['admin'],
        'description': module.params['description'],
        'multicast_group': module.params['multicast_group'],
        'source_interface': module.params['source_interface'],
    }

    commands = list()
    current_resource = get_resource(eapi, identifier)

    if state == 'configured':

        if current_resource is None:
            current_resource = create_resource(eapi, identifier)
            result['created'] = True

        changeset = set(new_resource.items()).difference(\
                    current_resource.items())

        for key, value in changeset:
            if value is None and null_as_default:
                command = ATTRIBUTE_TO_DEFAULT_MAP.get(key)
            elif value is not None:
                command = ATTRIBUTE_TO_CONFIG_MAP.get(key)
                if command:
                    if callable(command):
                        command = command(new_resource)
                    else:
                        command = str(command).format(**new_resource)
            else:
                command = None

            if command:
                commands.append(command)

    elif state == 'unconfigured':
        if isconfigured(eapi, identifier):
            commands.append('no interface %s' % identifier)

    elif state == 'default':
        if not isdefault(eapi, identifier):
            commands.append('default interface %s' % identifier)

    if commands:
        commands.insert(0, 'interface %s' % identifier)
        result['commands'] = commands
        if not module.check_mode:
            eapi.config(commands)
        result['changed'] = True

    result['resource'] = get_resource(eapi, identifier)
    result['current_resource'] = current_resource
    result['new_resource'] = new_resource

    module.exit_json(**result)

main()
